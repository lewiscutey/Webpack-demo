{"version":3,"sources":["webpack:///./src/a.scss","webpack:///./src/b.js","webpack:///./src/c.js","webpack:///./src/common/aa.js","webpack:///./src/common1/aa.js","webpack:///./src/d.js"],"names":[],"mappings":";;;;;;;;;AAAA;AACA,kCAAkC,mBAAO,CAAC,qGAAgD;AAC1F;AACA;AACA,cAAc,QAAS,QAAQ,eAAe,EAAE,WAAW,qBAAqB,EAAE;;;;;;;;;;;;;ACJlF;AAAA;AAAA;AAAA;AAAA;AAA6B;AACI;AACS;;AAE1C,iDAAG;AACH,sDAAG;AACH,uDAAI;;AAEG;AACP;AACA;;;;;;;;;;;;;ACVA;AAAA;AAAA;AAA6B;AAC7B;;AAEA,iDAAG;;AAEH,uHAAgB;;AAED;AACf;AACA;;AAEA;AACA;AACA,CAAC,C;;;;;;;;;;;;ACbD;AAAA;AAAO;AACP;AACA,C;;;;;;;;;;;;ACFA;AAAA;AAAO;AACP;AACA,C;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAO;AACP;AACA;AACO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;;AAEP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uFAAuF;AACvF,gBAAgB,mBAAmB,mBAAmB,mCAAmC,MAAM,EAAE;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,oBAAoB,GAAG,eAAe,GAAG,UAAU;AACtF;AACA,qDAAqD;AACrD,wCAAwC,UAAU,GAAG;AACrD;AACA,eAAe;AACf;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,6EAA6E;AAC7E;AACA;AACA;AACA,mCAAmC,oBAAoB,GAAG,eAAe,GAAG,KAAK;AACjF;AACA,4DAA4D,KAAK,OAAO;AACxE,wCAAwC,UAAU,GAAG;AACrD;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA","file":"async-commons.js","sourcesContent":["// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../node_modules/css-loader/dist/runtime/api.js\");\nexports = module.exports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \"div {\\n  color: red; }\\n  div a {\\n    display: block; }\\n\", \"\"]);\n","import { mod }  from './d.js'\nimport { del } from './common/aa'\nimport { del as del1 } from './common1/aa'\n\nmod(100, 11)\ndel(100, 11)\ndel1(100, 11)\n\nexport function add(a, b) {\n  return a + b\n}\n","import { mod } from \"./d.js\";\n// import Vue from 'vue'\n\nmod(100, 11)\n\nimport('./b.js').then(add => add(1, 2));\n\nexport default function del(a, b) {\n  return a - b\n}\n\nvar vm = new Vue({\n  // 选项\n})","export function del (a, b) {\n  return a - b\n}","export function del (a, b) {\n  return a - b\n}","export function mod(a, b) {\n  return a % b\n}\nexport const d = 'd'\n\nclass ExtractChunksPlugin {\n  constructor(options) {\n    this.options = options\n    this.chunkPath = options.chunkPath || 'Chunks'\n  }\n\n  apply(compiler) {\n    compiler.hooks.thisCompilation.tap(pluginName, compilation => {\n      // 抽取公共chunk\n      compilation.hooks.optimizeDependenciesAdvanced.tap(pluginName, modules => {\n        for (const module of modules) {\n          // 被依赖小于2，不会当做公共chunk进行抽取\n          if (module.reasons.length < 2) continue\n\n          const chunkName = module.resource.match(/\\w+(?=\\.)/gi)[0]\n          const hasChunkName = hasChunk(chunkName, compilation)\n          if (hasChunkName) continue\n\n          const newChunk = compilation.addChunk(chunkName)\n          debugger\n\n          // Module内部会进行关联，这个方法判断如果已经存在这个chunk，则返回false；\n          if (module.addChunk(newChunk)) {\n            newChunk.addModule(module)\n            extractModules.set(chunkName, module)\n          }\n\n          if (newChunk.groupsIterable.chunkGroup) {\n            newChunk.groupsIterable.chunkGroup.addChild(newChunk)\n          }\n\n          newChunk.hasExistedChunk = true\n        }\n      })\n\n      // 移除页面Chunk中已经存在的公共module，因为这个公共module已经以单独chunk的形式存在\n      compilation.hooks.optimizeChunks.tap(pluginName, chunks => {\n        chunks.forEach(chunk => {\n          extractModules.forEach(module => {\n            if (chunk.containsModule(module) && chunk.hasEntryModule()) {\n              chunk.removeModule(module)\n              module.removeChunk(chunk)\n            }\n          })\n        })\n      })\n\n      // 各个chunk配置附加参数及全局quickappGlobal\n      compilation.hooks.chunkAsset.tap(pluginName, (chunk, filename) => {\n        const sourceChildren = compilation.assets[filename]._source.children\n\n        let _actualParamStr = actualParamStr\n        let _formalParamStr = formalParamStr\n        if (chunk.entryModule) {\n          // sourceChildren.splice(1, 0, quickappGlobal)\n          _actualParamStr = actualModuleRequireParam\n            .concat(appModuleRequireNativeFunctions)\n            .join(', ')\n          _formalParamStr = formalModuleRequireParam\n            .concat(appModuleRequireNativeFunctions)\n            .join(', ')\n        }\n\n        sourceChildren.forEach((item, index) => {\n          // 运行时的源码形式\n          if (item.constructor.name === 'PrefixSource') {\n            let content = item._source._value\n            // window -> global\n            content = windowReplaceWithGlobal(content)\n            content = content.replace(\n              /(?<=(if\\(installedChunks\\[depId\\]\\s+!==\\s+0\\)\\s+))fulfilled\\s+=\\s+false;/,\n              '{ fulfilled = false; $app_evaluate$(`${quickappGlobal.chunkFileMap[depId]}.js`); }' // eslint-disable-line\n            )\n            // 引入额外方法\n            content = content.replace(\n              /(?<=(modules\\[moduleId\\].call\\())module.exports,\\s+module,\\s+module.exports,\\s+__webpack_require__/,\n              _actualParamStr\n            )\n            item._source._value = content\n          } else if (item.constructor.name === 'String') {\n            // window -> global\n            let content = windowReplaceWithGlobal(item)\n            // 引入额外方法\n            content = content.replace(\n              /(?<=function\\()module,\\s+__webpack_exports__(,\\s+__webpack_require__)?/,\n              _formalParamStr\n            )\n            sourceChildren[index] = content\n          }\n        })\n\n        // 抽取的chunk放到配置的（默认为Chunks）文件夹下\n        if (chunk.hasExistedChunk) {\n          let tempFile = compilation.assets[filename]\n          delete compilation.assets[filename]\n          let newFilename = this.chunkPath + '/' + filename\n          chunk.files = chunk.files.map(item => {\n            if (item === filename) {\n              return newFilename\n            }\n          })\n          compilation.assets[newFilename] = tempFile\n        }\n      })\n\n      // 把引用公共chunk的方式替换为$app_evaluate$\n      compilation.moduleTemplates.javascript.hooks.render.tap(\n        pluginName,\n        moduleSourcePostModule => {\n          // 配置为sourcemap的源码形式\n          if (moduleSourcePostModule.constructor.name === 'CachedSource') {\n            let source = moduleSourcePostModule._source\n            if (\n              source &&\n              source.constructor.name === 'ReplaceSource' &&\n              source.replacements &&\n              source.replacements.length\n            ) {\n              source.replacements.map(items => {\n                let chunkName =\n                  items.content.match(/\\w+(?=\\.js)/gi) && items.content.match(/\\w+(?=\\.js)/gi)[0]\n                let chunkPath = `${compiler.outputPath}/${this.chunkPath}/${chunkName}.js`\n                items.content = items.content.replace(\n                  /\\s=\\s__webpack_require__\\((.+?)\\);/,\n                  ` = $app_evaluate$('${chunkPath}');` // eslint-disable-line\n                )\n              })\n            }\n            moduleSourcePostModule._source = source\n          } else if (moduleSourcePostModule.constructor.name === 'RawSource') {\n            // 默认为eval的源码形式\n            let value = moduleSourcePostModule._value\n            if (value) {\n              let chunkName = value.match(/\\s=\\s__webpack_require__\\((.+?)\\);/gi)\n              chunkName && chunkName.map(item => {\n                item = item.match(/(\\w+)\\s+/ig) && item.match(/(\\w+)\\s+/ig)[0] && item.match(/(\\w+)\\s+/ig)[0].slice(0, -1)\n                if(!extractModules.get(item)) return\n                let chunkPath = `${compiler.outputPath}/${this.chunkPath}/${item}.js`\n                value = value.replace(\n                  new RegExp(` = __webpack_require__((.+?)${item}(.+?));`, 'i'),\n                  ` = $app_evaluate$('${chunkPath}');` // eslint-disable-line\n                )\n              })\n            }\n            moduleSourcePostModule._value = value\n          }\n        }\n      )\n    })\n  }\n}\n"],"sourceRoot":""}